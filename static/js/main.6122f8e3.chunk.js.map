{"version":3,"sources":["components/canvas.js","components/webcam.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initCanvas","context","c1","current","getContext","effectType","height","setting","window","videoTracks","getSettings","width","aspectRatio","parseInt","original","videoEffect","e","console","log","target","value","grayScale","blur","mosaic","camVideo","srcObject","drawImage","setTimeout","readyState","imageData","getImageData","data","dimension","i","y","putImageData","w","h","r","g","b","j","k","count","Math","abs","saveFrame","url","toDataURL","a","document","createElement","href","download","dispatchEvent","MouseEvent","React","createRef","react_default","className","ref","onChange","defaultValue","onClick","Component","Webcam","videoSwitch","state","streamState","endStream","startStream","stop","stream","removeTrack","setState","getUserMedia","getVideoDevices","navigator","mediaDevices","enumerateDevices","then","devices","camera","videoDevices","filter","device","kind","options","map","label","deviceId","key","catch","err","errorMsg","message","name","constraints","getVideoTracks","cameraSwitch","video","exact","audio","min","ideal","max","controls","autoPlay","playsInline","hidden","canvas","App","webcam","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6122f8e3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../App.css';\r\n\r\nclass Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.c1 = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initCanvas();\r\n    }\r\n\r\n    // saving canvas data to component member and set the size\r\n    initCanvas = () => {\r\n        this.context = this.c1.current.getContext('2d');\r\n        this.effectType = \"original\";\r\n        this.height = 400;\r\n        let setting = window.videoTracks[0].getSettings();\r\n        this.width = (setting.aspectRatio) ? parseInt(this.height * setting.aspectRatio) : parseInt(setting.width / setting.height * this.height);\r\n        this.c1.current.width = this.width;\r\n        this.c1.current.height = this.height;\r\n        this.original();\r\n    }\r\n\r\n    // handling selection of videoEffects\r\n    videoEffect = (e) => {\r\n        console.log(e.target.value);\r\n        this.effectType = e.target.value;\r\n        (e.target.value === \"grayscale\") ? this.grayScale() : (e.target.value === \"blur\") ? this.blur() : (e.target.value === \"mosaic\") ? this.mosaic() : this.original();\r\n    }\r\n\r\n    // original effect- call self and redo every 30 milliseconds\r\n    original = () => {\r\n        console.log(\"original\");\r\n        if (window.camVideo.srcObject === null || this.effectType !== \"original\") {\r\n            return;\r\n        }\r\n\r\n        this.context.drawImage(window.camVideo, 0, 0, this.width, this.height);\r\n        setTimeout(() => {\r\n            this.original();\r\n        }, 40);\r\n    }\r\n\r\n    // grayscale\r\n    grayScale = () => {\r\n        if (window.videoTracks[0].readyState === \"ended\" || this.effectType !== \"grayscale\") {\r\n            return;\r\n        }\r\n\r\n        this.context.drawImage(window.camVideo, 0, 0, this.width, this.height);\r\n        let imageData = this.context.getImageData(0, 0, this.width, this.height);\r\n        let data = imageData.data;\r\n        let dimension = this.height * this.width * 4; //mulitple by 4 because one pixel contains r,g,b,a\r\n\r\n        for (let i = 0; i < dimension; i += 4) {\r\n            let y = data[i] * 0.30 + data[i + 1] * 0.59 + data[i + 2] * 0.11; //according to the grayscale formula\r\n            data[i] = y; //r\r\n            data[i + 1] = y; //g\r\n            data[i + 2] = y; //b\r\n        }\r\n\r\n        this.context.putImageData(imageData, 0, 0);\r\n        setTimeout(() => {\r\n            this.grayScale();\r\n        }, 40);\r\n    }\r\n\r\n    //mosaic \r\n    mosaic = () => {\r\n        if (window.videoTracks[0].readyState === \"ended\" || this.effectType !== \"mosaic\") {\r\n            return;\r\n        }\r\n        this.context.drawImage(window.camVideo, 0, 0, this.width, this.height);\r\n        let imageData = this.context.getImageData(0, 0, this.width, this.height);\r\n        let data = imageData.data;\r\n        let w = this.width * 4;\r\n        let h = this.height;\r\n\r\n        for (let i = 0; i < h; i += 24) {\r\n            let r,g,b;\r\n            for (let j = 0; j < w; j += 4) {\r\n                if (j % 96 === 0  && i % 24 === 0) {\r\n                    data[i * w + j+3] = 240;\r\n                    r = data[i * w + j];\r\n                    g = data[i * w + j + 1];\r\n                    b = data[i * w + j + 2];\r\n                }\r\n                for (let k = 0; k <24; k++) {\r\n                    data[(i+k) * w + j] = r;\r\n                    data[(i+k) * w + j + 1] = g;\r\n                    data[(i+k) * w + j + 2] = b;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        this.context.putImageData(imageData, 0, 0);\r\n        setTimeout(() => {\r\n            this.mosaic();\r\n        }, 40);\r\n    }\r\n\r\n    //blur, need to be more efficient, easily lag\r\n    blur = () => {\r\n        if (window.videoTracks[0].readyState === \"ended\" || this.effectType !== \"blur\") {\r\n            return;\r\n        }\r\n\r\n        this.context.drawImage(window.camVideo, 0, 0, this.width, this.height);\r\n        let imageData = this.context.getImageData(0, 0, this.width, this.height);\r\n        let data = imageData.data;\r\n        let dimension = this.width * this.height * 4;\r\n        let step = 2 * 2 * 4;\r\n        let r, g, b, count;\r\n\r\n\r\n        //iterate all pixels and mix its 6*6 pixels surrounded \r\n        for (let i = 0; i < dimension; i += 4) { //i represent the central pixel\r\n            for (let k = i - step; k < i + step; k += 4) { //k represent surrounded pixels\r\n                if (data[k] >= 0 && Math.abs(k % (4 * this.width) - i % (4 * this.width)) <= this.width) { //to avoid border pixels mix \r\n                    r += data[k];\r\n                    g += data[k + 1];\r\n                    b += data[k + 2];\r\n                    count += 1;\r\n                }\r\n            }\r\n            data[i] = parseInt(r / count);\r\n            data[i + 1] = parseInt(g / count);\r\n            data[i + 2] = parseInt(b / count);\r\n            r = g = b = count = 0;\r\n        }\r\n\r\n        this.context.putImageData(imageData, 0, 0);\r\n        setTimeout(() => {\r\n            this.blur();\r\n        }, 40);\r\n    }\r\n\r\n    saveFrame = () => {\r\n        let url = this.c1.current.toDataURL(\"image/png\");\r\n        let a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = this.effectType + \".png\";\r\n        a.dispatchEvent(new MouseEvent('click')); //fire a.click event\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <canvas className=\"c1\" ref={this.c1}></canvas>\r\n                <br />\r\n                <select onChange={this.videoEffect} defaultValue=\"original\">\r\n                    <option value=\"original\">Original</option>\r\n                    <option value=\"grayscale\">Grayscale</option>\r\n                    <option value=\"blur\">Blur</option>\r\n                    <option value=\"mosaic\">Mosaic</option>\r\n                </select>\r\n                <button onClick={this.saveFrame}> Save </button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Canvas; ","import React from 'react';\r\nimport './../App.css';\r\nimport Canvas from './canvas';\r\n\r\nclass Webcam extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            errorMsg: \"\",\r\n            streamState: \"\",\r\n            camera: \"\"\r\n        }\r\n\r\n        this.camVideo = React.createRef();\r\n    }\r\n\r\n    // after component mounted, set up contraints and start the stream.\r\n    componentDidMount() {\r\n\r\n        this.constraints = {\r\n            audio: false,\r\n            video: {\r\n                width: { min: 640, ideal: 1920, max: 1920 },\r\n                height: { min: 400, ideal: 1080, max: 1080 },\r\n            }\r\n        }\r\n        this.startStream();\r\n    }\r\n\r\n    // to switch on/off video stream\r\n    videoSwitch = () => {\r\n        if (this.state.streamState === true) {\r\n            this.endStream();\r\n        } else {\r\n            this.startStream();\r\n        }\r\n    }\r\n\r\n    // to end video stream\r\n    endStream = () => {\r\n        this.videoTracks[0].stop();\r\n        this.stream.removeTrack(this.videoTracks[0]);\r\n        this.camVideo.current.srcObject = null;\r\n        this.setState({\r\n            streamState: false,\r\n        });\r\n    }\r\n\r\n    // to start a new video stream\r\n    startStream = () => {\r\n        this.getUserMedia();\r\n    }\r\n\r\n    // to get videoDevices\r\n    getVideoDevices = () => {\r\n        navigator.mediaDevices.enumerateDevices()\r\n            .then((devices) => {\r\n                this.videoDevices = devices.filter((device) => {\r\n                    return (device.kind === \"videoinput\");\r\n                });\r\n\r\n                if (this.videoDevices) {\r\n                    let camera;\r\n                    this.options = this.videoDevices.map((device) => {\r\n                        if (device.label === this.videoTracks[0].label) {\r\n                            camera = device.deviceId;\r\n                        }\r\n                        return <option key={device.deviceId} value={device.deviceId} >{device.label}</option>\r\n                    })\r\n                    this.setState({ camera, streamState: true });\r\n                }\r\n\r\n            })\r\n\r\n            .catch((err) => {\r\n                this.setState({\r\n                    errorMsg: \"Error message: \" + (err.message ? err.message : err.name)\r\n                });\r\n            })\r\n    }\r\n\r\n    // to get media stream\r\n    getUserMedia = () => {\r\n        navigator.mediaDevices.getUserMedia(this.constraints)\r\n            .then((stream) => {\r\n                this.stream = stream;\r\n                this.videoTracks = stream.getVideoTracks();\r\n                this.camVideo.current.srcObject = stream;\r\n                window.camVideo = this.camVideo.current;\r\n                window.videoTracks = this.videoTracks;\r\n                this.getVideoDevices();\r\n\r\n            })\r\n            .catch((err) => {\r\n                this.setState({\r\n                    errorMsg: \"Error message: \" + (err.message ? err.message : err.name)\r\n                });\r\n            })\r\n    }\r\n\r\n    // handling changes of camera\r\n    cameraSwitch = (e) => {\r\n        this.constraints.video.deviceId = { exact: e.target.value };\r\n        this.setState({ camera: e.target.value });\r\n        this.endStream();\r\n        this.startStream();\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render\");\r\n        let options = this.options;\r\n\r\n        return (\r\n            <div>\r\n                {this.state.errorMsg ? (<p> {this.state.errorMsg} </p>) :\r\n                    (\r\n                        <div>\r\n\r\n                            <video controls={true} className=\"webcam\" ref={this.camVideo} autoPlay playsInline hidden={false}></video>\r\n\r\n                            <br />\r\n                            <button onClick={this.startStream} hidden={this.state.streamState}>create stream</button>\r\n                            <button onClick={this.endStream} hidden={!this.state.streamState}>release stream</button>\r\n                            <select onChange={this.cameraSwitch} value={this.state.camera}>\r\n                                {options}\r\n                            </select>\r\n                            <br />\r\n                            {(this.state.streamState) ? <Canvas /> :\r\n                                <p> Create stream first </p>\r\n                            }\r\n\r\n                        </div>\r\n\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Webcam; ","import React from 'react';\r\nimport './App.css';\r\nimport Webcam from './components/webcam';\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Webcam />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}