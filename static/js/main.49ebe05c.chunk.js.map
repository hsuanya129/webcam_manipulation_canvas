{"version":3,"sources":["components/webcam.js","App.js","serviceWorker.js","index.js"],"names":["Webcam","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","videoSwitch","stream","active","endStream","startStream","videoTracks","stop","removeTrack","camVideo","current","srcObject","setState","buttonLabel","navigator","mediaDevices","getUserMedia","audio","video","width","exact","height","aspectRatio","then","console","log","onremovetrack","getVideoTracks","label","play","processor","catch","err","errorMsg","message","c1","getContext","addEventListener","timerCallback","ended","computeFrame","setTimeout","drawImage","state","React","createRef","c2","react_default","a","createElement","className","ref","onClick","Component","App","webcam","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"oMA+HeA,oBA3HX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAaVQ,YAAc,YACiB,IAAvBP,EAAKQ,OAAOC,OACZT,EAAKU,YAELV,EAAKW,eAlBMX,EAuBnBU,UAAY,WACRV,EAAKY,YAAY,GAAGC,OACpBb,EAAKQ,OAAOM,YAAYd,EAAKY,YAAY,IACzCZ,EAAKe,SAASC,QAAQC,UAAY,KAClCjB,EAAKkB,SAAS,CACVC,YAAa,mBA5BFnB,EAiCnBW,YAAc,WAaVS,UAAUC,aAAaC,aAVL,CACdC,OAAM,EACNC,MAAM,CACFC,MAAM,CAACC,MAAM,KACbC,OAAO,CAACD,MAAM,KACdE,YAAa,eAMhBC,KAAK,SAACrB,GACHsB,QAAQC,IAAIvB,GACZA,EAAOwB,cAAgB,WACnBF,QAAQC,IAAI,iBAGhB/B,EAAKQ,OAASA,EACdR,EAAKY,YAAcJ,EAAOyB,iBAC1BH,QAAQC,IAAI,iBAAiB/B,EAAKY,YAAY,GAAGsB,OACjDlC,EAAKe,SAASC,QAAQC,UAAYT,EAClCR,EAAKe,SAASC,QAAQmB,OACrBN,KAAK7B,EAAKkB,SAAS,CAChBC,YAAa,oBAEhBU,KAAK7B,EAAKoC,eAGdC,MAAM,SAACC,GACJtC,EAAKkB,SAAS,CACVqB,SAAU,kBAAoBD,EAAIE,aAlE/BxC,EA4EnBoC,UAAY,WACRN,QAAQC,IAAI/B,EAAKyC,GAAGzB,QAAQ0B,WAAW,OACvC1C,EAAKe,SAASC,QAAQ2B,iBAAiB,OAAO,WAC1C3C,EAAK4C,kBACP,IAhFa5C,EAoFnB4C,cAAgB,WACT5C,EAAKe,SAASC,QAAQ6B,QAGzB7C,EAAK8C,eACLC,WAAW,WACP/C,EAAK4C,iBACN,KA3FY5C,EA+FnB8C,aAAe,WACE9C,EAAKyC,GAAGzB,QAAQ0B,WAAW,MAC/BM,UAAUhD,EAAKe,SAASC,QAAQ,EAAE,EAAE,IAAI,MA9FjDhB,EAAKiD,MAAQ,CACTV,SAAU,GACVpB,YAAa,kBAGjBnB,EAAKe,SAAWmC,IAAMC,YACtBnD,EAAKyC,GAAKS,IAAMC,YAChBnD,EAAKoD,GAAKF,IAAMC,YAVDnD,mFAwEfG,KAAKQ,+CA+BL,OACI0C,EAAAC,EAAAC,cAAA,WACKpD,KAAK8C,MAAMV,SAAYc,EAAAC,EAAAC,cAAA,aAAKpD,KAAK8C,MAAMV,SAAhB,KAEhBc,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAASC,IAAKtD,KAAKY,WACpCsC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQG,QAASvD,KAAKI,aAAcJ,KAAK8C,MAAM9B,aAC/CkC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,KAAKC,IAAKtD,KAAKsC,GAAIhB,MAAO,IAAKE,OAAQ,MACzD0B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,KAAKC,IAAKtD,KAAKiD,GAAI3B,MAAO,IAAKE,OAAQ,eAlHhEuB,IAAMS,YCUZC,mLARX,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACM,EAAD,cAJUX,IAAMS,WCSJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBnD,WACrBA,UAAUoD,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.49ebe05c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../App.css';\r\n\r\nclass Webcam extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            errorMsg: \"\",\r\n            buttonLabel: \"release stream\"\r\n        }\r\n\r\n        this.camVideo = React.createRef();\r\n        this.c1 = React.createRef();\r\n        this.c2 = React.createRef();\r\n    }\r\n\r\n    // to switch on/off video stream\r\n    videoSwitch = () => {\r\n        if (this.stream.active === true) {\r\n            this.endStream();\r\n        } else {\r\n            this.startStream();\r\n        }\r\n    }\r\n\r\n    // to end video stream\r\n    endStream = () => {\r\n        this.videoTracks[0].stop();\r\n        this.stream.removeTrack(this.videoTracks[0]);\r\n        this.camVideo.current.srcObject = null;\r\n        this.setState({\r\n            buttonLabel: \"create stream\"\r\n        });\r\n    }\r\n\r\n    // to start a new video stream\r\n    startStream = () => {\r\n\r\n        // TODO1: Need to be more familiar how it works\r\n        let constraints = {\r\n            audio:false,\r\n            video:{\r\n                width:{exact:640},\r\n                height:{exact:400},\r\n                aspectRatio: 1.777777778,\r\n            }\r\n        }\r\n\r\n        //it returns a Promise object\r\n        navigator.mediaDevices.getUserMedia(constraints)\r\n            .then((stream) => {\r\n                console.log(stream);\r\n                stream.onremovetrack = function () {\r\n                    console.log('Stream ended');\r\n                };\r\n\r\n                this.stream = stream;\r\n                this.videoTracks = stream.getVideoTracks();\r\n                console.log(\"Using device: \"+this.videoTracks[0].label); // TODO2: try to make it more flexiable\r\n                this.camVideo.current.srcObject = stream;\r\n                this.camVideo.current.play()\r\n                .then(this.setState({\r\n                    buttonLabel: \"release stream\"\r\n                }))\r\n                .then(this.processor());\r\n                \r\n            })\r\n            .catch((err) => {\r\n                this.setState({\r\n                    errorMsg: \"Error message: \" + err.message\r\n                });\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startStream();\r\n    }\r\n\r\n    //whenever the video play, call timerCallback\r\n    processor = () => {\r\n        console.log(this.c1.current.getContext('2d'));\r\n        this.camVideo.current.addEventListener('play',()=>{\r\n            this.timerCallback();\r\n        },false);\r\n    }\r\n\r\n    \r\n    timerCallback = () => {\r\n        if(this.camVideo.current.ended){\r\n            return;\r\n        }\r\n        this.computeFrame();  \r\n        setTimeout(() => {\r\n            this.timerCallback(); // TODO3: Need to be more familiar how it works,\r\n        }, 0);\r\n    }\r\n\r\n    //Drawing video into canvas\r\n    computeFrame = () => {\r\n        let context1=this.c1.current.getContext('2d');\r\n        context1.drawImage(this.camVideo.current,0,0,320,200);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.errorMsg ? (<p> {this.state.errorMsg} </p>) :\r\n                    (\r\n                        <div>\r\n                            <video className=\"webcam\" ref={this.camVideo} ></video>\r\n                            <br />\r\n                            <button onClick={this.videoSwitch}>{this.state.buttonLabel}</button>\r\n                            <br/>\r\n                            <canvas className=\"c1\" ref={this.c1} width={320} height={200}></canvas>\r\n                            <canvas className=\"c2\" ref={this.c2} width={320} height={200}></canvas>\r\n                        </div>\r\n                        \r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Webcam; ","import React from 'react';\r\nimport './App.css';\r\nimport Webcam from './components/webcam';\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Webcam />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}