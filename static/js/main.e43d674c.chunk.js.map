{"version":3,"sources":["components/webcam.js","App.js","serviceWorker.js","index.js"],"names":["Webcam","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","videoSwitch","state","streamState","endStream","startStream","videoTracks","stop","stream","removeTrack","camVideo","current","srcObject","setState","getVideoDevices","navigator","mediaDevices","enumerateDevices","then","devices","videoDevices","filter","device","kind","getUserMedia","catch","err","errorMsg","message","name","constraints","getVideoTracks","initCanvas","cameraSwitch","video","deviceId","exact","cameraSelect","value","videoEffect","e","console","log","target","effectType","grayScale","blur","mosaic","original","context","c1","getContext","addEventListener","height","width","ended","drawImage","setTimeout","imageData","getImageData","data","dimension","i","y","putImageData","w","h","r","g","b","j","count","k","Math","abs","parseInt","saveFrame","download","href","toDataURL","click","React","createRef","audio","min","ideal","max","options","_this2","map","react_default","a","createElement","key","selected","label","controls","className","ref","autoPlay","playsInline","hidden","onClick","onChange","defaultValue","Component","App","webcam","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"oMAyReA,oBArRX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAcVQ,YAAc,YACqB,IAA3BP,EAAKQ,MAAMC,YACXT,EAAKU,YAELV,EAAKW,eAnBMX,EAwBnBU,UAAY,WACRV,EAAKY,YAAY,GAAGC,OACpBb,EAAKc,OAAOC,YAAYf,EAAKY,YAAY,IACzCZ,EAAKgB,SAASC,QAAQC,UAAY,KAClClB,EAAKmB,SAAS,CACVV,aAAa,KA7BFT,EAkCnBW,YAAc,WACVX,EAAKoB,mBAnCUpB,EAuCnBoB,gBAAkB,WACdC,UAAUC,aAAaC,mBAClBC,KAAK,SAACC,GACHzB,EAAK0B,aAAeD,EAAQE,OAAO,SAACC,GAChC,MAAwB,eAAhBA,EAAOC,OAEnB7B,EAAK8B,iBAGRC,MAAM,SAACC,GACJhC,EAAKmB,SAAS,CACVc,SAAU,mBAAqBD,EAAIE,QAAUF,EAAIE,QAAUF,EAAIG,WAlD5DnC,EAwDnB8B,aAAe,WACXT,UAAUC,aAAaQ,aAAa9B,EAAKoC,aACpCZ,KAAK,SAACV,GACHd,EAAKc,OAASA,EACdd,EAAKY,YAAcE,EAAOuB,iBAC1BrC,EAAKgB,SAASC,QAAQC,UAAYJ,EAClCd,EAAKmB,SAAS,CACVV,aAAa,IAEjBT,EAAKsC,eAERP,MAAM,SAACC,GACJhC,EAAKmB,SAAS,CACVc,SAAU,mBAAqBD,EAAIE,QAAUF,EAAIE,QAAUF,EAAIG,WArE5DnC,EA2EnBuC,aAAe,WACXvC,EAAKoC,YAAYI,MAAMC,SAAW,CAAEC,MAAO1C,EAAK2C,aAAa1B,QAAQ2B,OACrE5C,EAAKU,YACLV,EAAKW,eA9EUX,EA8FnB6C,YAAc,SAACC,GACXC,QAAQC,IAAIF,EAAEG,OAAOL,OACrB5C,EAAKkD,WAAaJ,EAAEG,OAAOL,MACP,cAAnBE,EAAEG,OAAOL,MAAyB5C,EAAKmD,YAAkC,SAAnBL,EAAEG,OAAOL,MAAoB5C,EAAKoD,OAA6B,WAAnBN,EAAEG,OAAOL,MAAsB5C,EAAKqD,SAAWrD,EAAKsD,YAjGxItD,EAqGnBsC,WAAa,WACTtC,EAAKuD,QAAUvD,EAAKwD,GAAGvC,QAAQwC,WAAW,MAC1CzD,EAAKkD,WAAa,WAClBlD,EAAKgB,SAASC,QAAQyC,iBAAiB,OAAQ,WAI3C1D,EAAK2D,OAAS,IACd3D,EAAK4D,MAAQ,IAEb5D,EAAKwD,GAAGvC,QAAQ2C,MAAQ5D,EAAK4D,MAC7B5D,EAAKwD,GAAGvC,QAAQ0C,OAAS3D,EAAK2D,OAC9B3D,EAAKsD,aACN,IAlHYtD,EAuHnBsD,SAAW,WACHtD,EAAKgB,SAASC,QAAQ4C,QAAoC,IAA3B7D,EAAKQ,MAAMC,aAA6C,aAApBT,EAAKkD,aAI5ElD,EAAKuD,QAAQO,UAAU9D,EAAKgB,SAASC,QAAS,EAAG,EAAGjB,EAAK4D,MAAO5D,EAAK2D,QACrEI,WAAW,WACP/D,EAAKsD,YACN,MA/HYtD,EAmInBmD,UAAY,WACR,IAAInD,EAAKgB,SAASC,QAAQ4C,QAAoC,IAA3B7D,EAAKQ,MAAMC,aAA6C,cAApBT,EAAKkD,WAA5E,CAGAlD,EAAKuD,QAAQO,UAAU9D,EAAKgB,SAASC,QAAS,EAAG,EAAGjB,EAAK4D,MAAO5D,EAAK2D,QAKrE,IAJA,IAAIK,EAAYhE,EAAKuD,QAAQU,aAAa,EAAG,EAAGjE,EAAK4D,MAAO5D,EAAK2D,QAC7DO,EAAOF,EAAUE,KACjBC,EAAYnE,EAAK2D,OAAS3D,EAAK4D,MAAQ,EAElCQ,EAAI,EAAGA,EAAID,EAAWC,GAAK,EAAG,CACnC,IAAIC,EAAc,GAAVH,EAAKE,GAA0B,IAAdF,EAAKE,EAAI,GAA0B,IAAdF,EAAKE,EAAI,GACvDF,EAAKE,GAAKC,EACVH,EAAKE,EAAI,GAAKC,EACdH,EAAKE,EAAI,GAAKC,EAGlBrE,EAAKuD,QAAQe,aAAaN,EAAW,EAAG,GACxCD,WAAW,WACP/D,EAAKmD,aACN,MAtJYnD,EA0JnBqD,OAAS,WACL,IAAIrD,EAAKgB,SAASC,QAAQ4C,QAAoC,IAA3B7D,EAAKQ,MAAMC,aAA6C,WAApBT,EAAKkD,WAA5E,CAGAlD,EAAKuD,QAAQO,UAAU9D,EAAKgB,SAASC,QAAS,EAAG,EAAGjB,EAAK4D,MAAO5D,EAAK2D,QAMrE,IALA,IAAIK,EAAYhE,EAAKuD,QAAQU,aAAa,EAAG,EAAGjE,EAAK4D,MAAO5D,EAAK2D,QAC7DO,EAAOF,EAAUE,KACjBK,EAAiB,EAAbvE,EAAK4D,MACTY,EAAIxE,EAAK2D,OAEJS,EAAI,EAAGA,EAAII,EAAGJ,IAEnB,IADA,IAAIK,OAAC,EAAEC,OAAC,EAAEC,OAAC,EACFC,EAAI,EAAGA,EAAIL,EAAGK,GAAK,EACpBA,EAAI,KAAO,GAAKA,EAAI,GAAK,KACzBV,EAAKE,EAAIG,EAAIK,EAAI,GAAK,IACtBH,EAAIP,EAAKE,EAAIG,EAAIK,GACjBF,EAAIR,EAAKE,EAAIG,EAAIK,EAAI,GACrBD,EAAIT,EAAKE,EAAIG,EAAIK,EAAI,IAEzBV,EAAKE,EAAIG,EAAIK,GAAKH,EAClBP,EAAKE,EAAIG,EAAIK,EAAI,GAAKF,EACtBR,EAAKE,EAAIG,EAAIK,EAAI,GAAKD,EACtBT,EAAKE,EAAIG,EAAIK,EAAI,GAAK,IAI9B5E,EAAKuD,QAAQe,aAAaN,EAAW,EAAG,GACxCD,WAAW,WACP/D,EAAKqD,UACN,MAvLYrD,EA2LnBoD,KAAO,WACH,IAAIpD,EAAKgB,SAASC,QAAQ4C,QAAoC,IAA3B7D,EAAKQ,MAAMC,aAA6C,SAApBT,EAAKkD,WAA5E,CAGAlD,EAAKuD,QAAQO,UAAU9D,EAAKgB,SAASC,QAAS,EAAG,EAAGjB,EAAK4D,MAAO5D,EAAK2D,QASrE,IARA,IAIIc,EAAGC,EAAGC,EAAGE,EAJTb,EAAYhE,EAAKuD,QAAQU,aAAa,EAAG,EAAGjE,EAAK4D,MAAO5D,EAAK2D,QAC7DO,EAAOF,EAAUE,KACjBC,EAAYnE,EAAK4D,MAAQ5D,EAAK2D,OAAS,EAMlCS,EAAI,EAAGA,EAAID,EAAWC,GAAK,EAAG,CACnC,IAAK,IAAIU,EAAIV,EANN,GAMgBU,EAAIV,EANpB,GAM8BU,GAAK,EAClCZ,EAAKY,IAAM,GAAKC,KAAKC,IAAIF,GAAK,EAAI9E,EAAK4D,OAASQ,GAAK,EAAIpE,EAAK4D,SAAW5D,EAAK4D,QAC9Ea,GAAKP,EAAKY,GACVJ,GAAKR,EAAKY,EAAI,GACdH,GAAKT,EAAKY,EAAI,GACdD,GAAS,GAGjBX,EAAKE,GAAKa,SAASR,EAAII,GACvBX,EAAKE,EAAI,GAAKa,SAASP,EAAIG,GAC3BX,EAAKE,EAAI,GAAKa,SAASN,EAAIE,GAC3BJ,EAAIC,EAAIC,EAAIE,EAAQ,EAGxB7E,EAAKuD,QAAQe,aAAaN,EAAW,EAAG,GACxCD,WAAW,WACP/D,EAAKoD,QACN,MA1NYpD,EA6NnBkF,UAAY,WACRlF,EAAKmF,SAASlE,QAAQmE,KAAKpF,EAAKwD,GAAGvC,QAAQoE,UAAU,aACrDrF,EAAKmF,SAASlE,QAAQqE,SA5NtBtF,EAAKQ,MAAQ,CACTyB,SAAU,GACVxB,aAAa,GAGjBT,EAAKgB,SAAWuE,IAAMC,YACtBxF,EAAK2C,aAAe4C,IAAMC,YAC1BxF,EAAKwD,GAAK+B,IAAMC,YAChBxF,EAAKmF,SAAWI,IAAMC,YAXPxF,mFAmFfG,KAAKiC,YAAc,CACfqD,OAAO,EACPjD,MAAO,CACHoB,MAAO,CAAE8B,IAAK,IAAKC,MAAO,KAAMC,IAAK,MACrCjC,OAAQ,CAAE+B,IAAK,IAAKC,MAAO,KAAMC,IAAK,QAG9CzF,KAAKQ,+CAwIA,IAEDkF,EAFCC,EAAA3F,KASL,OARA4C,QAAQC,IAAI,UAER7C,KAAKS,cACLiF,EAAU1F,KAAKuB,aAAaqE,IAAI,SAACnE,GAC7B,OAAOoE,EAAAC,EAAAC,cAAA,UAAQC,IAAKvE,EAAOa,SAAUG,MAAOhB,EAAOa,SAAU2D,SAAWN,EAAKlF,YAAY,GAAGyF,QAAUzE,EAAOyE,OAAwBzE,EAAOyE,UAKhJL,EAAAC,EAAAC,cAAA,WACK/F,KAAKK,MAAMyB,SAAY+D,EAAAC,EAAAC,cAAA,aAAK/F,KAAKK,MAAMyB,SAAhB,KAEhB+D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOI,UAAU,EAAMC,UAAU,SAASC,IAAKrG,KAAKa,SAAUyF,UAAQ,EAACC,aAAW,EAACC,QAAQ,IAC3FX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQU,QAASzG,KAAKQ,YAAagG,OAAQxG,KAAKK,MAAMC,aAAtD,iBACAuF,EAAAC,EAAAC,cAAA,UAAQU,QAASzG,KAAKO,UAAWiG,QAASxG,KAAKK,MAAMC,aAArD,kBACAuF,EAAAC,EAAAC,cAAA,UAAQM,IAAKrG,KAAKwC,aAAckE,SAAU1G,KAAKoC,cAC1CsD,GAELG,EAAAC,EAAAC,cAAA,WAGE/F,KAAKK,MAAMC,YACRuF,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,UAAQK,UAAU,KAAKC,IAAKrG,KAAKqD,GAAII,MAAOzD,KAAKyD,MAAOD,OAAQxD,KAAKwD,SACrEqC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQW,SAAU1G,KAAK0C,YAAaiE,aAAa,YAC7Cd,EAAAC,EAAAC,cAAA,UAAQtD,MAAM,YAAd,YACAoD,EAAAC,EAAAC,cAAA,UAAQtD,MAAM,aAAd,aACAoD,EAAAC,EAAAC,cAAA,UAAQtD,MAAM,QAAd,QACAoD,EAAAC,EAAAC,cAAA,UAAQtD,MAAM,UAAd,WAEJoD,EAAAC,EAAAC,cAAA,UAAQU,QAASzG,KAAK+E,WAAtB,UACAc,EAAAC,EAAAC,cAAA,KAAGM,IAAKrG,KAAKgF,SAAUA,SAAS,kBAGpCa,EAAAC,EAAAC,cAAA,2CAzQXX,IAAMwB,YCUZC,mLARX,OACEhB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACe,EAAD,cAJU1B,IAAMwB,WCSJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBtG,WACrBA,UAAUuG,cAAcC,MAAMrG,KAAK,SAAAsG,GACjCA,EAAaC","file":"static/js/main.e43d674c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../App.css';\r\n\r\nclass Webcam extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            errorMsg: \"\",\r\n            streamState: true,\r\n        }\r\n\r\n        this.camVideo = React.createRef();\r\n        this.cameraSelect = React.createRef();\r\n        this.c1 = React.createRef();\r\n        this.download = React.createRef();\r\n    }\r\n\r\n    // to switch on/off video stream\r\n    videoSwitch = () => {\r\n        if (this.state.streamState === true) {\r\n            this.endStream();\r\n        } else {\r\n            this.startStream();\r\n        }\r\n    }\r\n\r\n    // to end video stream\r\n    endStream = () => {\r\n        this.videoTracks[0].stop();\r\n        this.stream.removeTrack(this.videoTracks[0]);\r\n        this.camVideo.current.srcObject = null;\r\n        this.setState({\r\n            streamState: false,\r\n        });\r\n    }\r\n\r\n    // to start a new video stream\r\n    startStream = () => {\r\n        this.getVideoDevices();\r\n    }\r\n\r\n    // to get videoDevices\r\n    getVideoDevices = () => {\r\n        navigator.mediaDevices.enumerateDevices()\r\n            .then((devices) => {\r\n                this.videoDevices = devices.filter((device) => {\r\n                    return (device.kind === \"videoinput\");\r\n                });\r\n                this.getUserMedia();\r\n            })\r\n\r\n            .catch((err) => {\r\n                this.setState({\r\n                    errorMsg: \"Error message: \" + (err.message ? err.message : err.name)\r\n                });\r\n            })\r\n    }\r\n\r\n    // to get media stream\r\n    getUserMedia = () => {\r\n        navigator.mediaDevices.getUserMedia(this.constraints)\r\n            .then((stream) => {\r\n                this.stream = stream;\r\n                this.videoTracks = stream.getVideoTracks();\r\n                this.camVideo.current.srcObject = stream;\r\n                this.setState({\r\n                    streamState: true,\r\n                });\r\n                this.initCanvas(); //initialize data we need in canvas\r\n            })\r\n            .catch((err) => {\r\n                this.setState({\r\n                    errorMsg: \"Error message: \" + (err.message ? err.message : err.name)\r\n                });\r\n            })\r\n    }\r\n\r\n    // handling changes of camera\r\n    cameraSwitch = () => {\r\n        this.constraints.video.deviceId = { exact: this.cameraSelect.current.value };\r\n        this.endStream();\r\n        this.startStream();\r\n    }\r\n\r\n    // after component mounted, set up contraints and start the stream.\r\n    componentDidMount() {\r\n        this.constraints = {\r\n            audio: false,\r\n            video: {\r\n                width: { min: 640, ideal: 1920, max: 1920 },\r\n                height: { min: 400, ideal: 1080, max: 1080 },\r\n            }\r\n        }\r\n        this.startStream();\r\n    }\r\n\r\n    // handling selection of videoEffects\r\n    videoEffect = (e) => {\r\n        console.log(e.target.value);\r\n        this.effectType = e.target.value;\r\n        (e.target.value === \"grayscale\") ? this.grayScale() : (e.target.value === \"blur\") ? this.blur() : (e.target.value === \"mosaic\") ? this.mosaic() : this.original();\r\n    }\r\n\r\n    // saving canvas data to component member and set the size\r\n    initCanvas = () => {\r\n        this.context = this.c1.current.getContext('2d');\r\n        this.effectType = \"original\";\r\n        this.camVideo.current.addEventListener('play', () => {\r\n            // this.height = this.camVideo.current.videoHeight; it lags to much at blur effect so we set smaller size \r\n            // this.width = this.camVideo.current.videoWidth;\r\n            // let setting = this.videoTracks[0].getSettings();\r\n            this.height = 400;\r\n            this.width = 640;\r\n            // this.width = parseInt(this.height * setting.aspectRatio);\r\n            this.c1.current.width = this.width;\r\n            this.c1.current.height = this.height;\r\n            this.original();\r\n        }, false);\r\n\r\n    }\r\n\r\n    // original effect- call self and redo every 30 milliseconds\r\n    original = () => {\r\n        if (this.camVideo.current.ended || this.state.streamState === false || this.effectType !== \"original\") {\r\n            return;\r\n        }\r\n\r\n        this.context.drawImage(this.camVideo.current, 0, 0, this.width, this.height);\r\n        setTimeout(() => {\r\n            this.original();\r\n        }, 30);\r\n    }\r\n\r\n    // grayscale\r\n    grayScale = () => {\r\n        if (this.camVideo.current.ended || this.state.streamState === false || this.effectType !== \"grayscale\") {\r\n            return;\r\n        }\r\n        this.context.drawImage(this.camVideo.current, 0, 0, this.width, this.height);\r\n        let imageData = this.context.getImageData(0, 0, this.width, this.height);\r\n        let data = imageData.data;\r\n        let dimension = this.height * this.width * 4; //mulitple by 4 because one pixel contains r,g,b,a\r\n\r\n        for (let i = 0; i < dimension; i += 4) {\r\n            let y = data[i] * 0.30 + data[i + 1] * 0.59 + data[i + 2] * 0.11; //according to the grayscale formula\r\n            data[i] = y; //r\r\n            data[i + 1] = y; //g\r\n            data[i + 2] = y; //b\r\n        }\r\n\r\n        this.context.putImageData(imageData, 0, 0);\r\n        setTimeout(() => {\r\n            this.grayScale();\r\n        }, 30);\r\n    }\r\n\r\n    //mosaic only vertical blur, move to right a little\r\n    mosaic = () => {\r\n        if (this.camVideo.current.ended || this.state.streamState === false || this.effectType !== \"mosaic\") {\r\n            return;\r\n        }\r\n        this.context.drawImage(this.camVideo.current, 0, 0, this.width, this.height);\r\n        let imageData = this.context.getImageData(0, 0, this.width, this.height);\r\n        let data = imageData.data;\r\n        let w = this.width * 4;\r\n        let h = this.height;\r\n\r\n        for (let i = 0; i < h; i++) {\r\n            let r, g, b;\r\n            for (let j = 0; j < w; j += 4) {\r\n                if (j % 24 === 0 && j % 48 < 24) {\r\n                    data[i * w + j + 3] = 128;\r\n                    r = data[i * w + j];\r\n                    g = data[i * w + j + 1];\r\n                    b = data[i * w + j + 2];\r\n                }\r\n                data[i * w + j] = r;\r\n                data[i * w + j + 1] = g;\r\n                data[i * w + j + 2] = b;\r\n                data[i * w + j + 3] = 250;\r\n            }\r\n        }\r\n\r\n        this.context.putImageData(imageData, 0, 0);\r\n        setTimeout(() => {\r\n            this.mosaic();\r\n        }, 30);\r\n    }\r\n\r\n    //blur, need to be more efficient, easily lag\r\n    blur = () => {\r\n        if (this.camVideo.current.ended || this.state.streamState === false || this.effectType !== \"blur\") {\r\n            return;\r\n        }\r\n        this.context.drawImage(this.camVideo.current, 0, 0, this.width, this.height);\r\n        let imageData = this.context.getImageData(0, 0, this.width, this.height);\r\n        let data = imageData.data;\r\n        let dimension = this.width * this.height * 4;\r\n        let step = 3 * 3 * 4;\r\n        let r, g, b, count;\r\n\r\n\r\n        //iterate all pixels and mix its 6*6 pixels surrounded \r\n        for (let i = 0; i < dimension; i += 4) { //i represent the central pixel\r\n            for (let k = i - step; k < i + step; k += 4) { //k represent surrounded pixels\r\n                if (data[k] >= 0 && Math.abs(k % (4 * this.width) - i % (4 * this.width)) <= this.width) { //to avoid border pixels mix \r\n                    r += data[k];\r\n                    g += data[k + 1];\r\n                    b += data[k + 2];\r\n                    count += 1;\r\n                }\r\n            }\r\n            data[i] = parseInt(r / count);\r\n            data[i + 1] = parseInt(g / count);\r\n            data[i + 2] = parseInt(b / count);\r\n            r = g = b = count = 0;\r\n        }\r\n\r\n        this.context.putImageData(imageData, 0, 0);\r\n        setTimeout(() => {\r\n            this.blur();\r\n        }, 30);\r\n    }\r\n\r\n    saveFrame = () => {\r\n        this.download.current.href=this.c1.current.toDataURL(\"image/png\");\r\n        this.download.current.click();\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render\");\r\n        let options;\r\n        if (this.videoTracks) {\r\n            options = this.videoDevices.map((device) => {\r\n                return <option key={device.deviceId} value={device.deviceId} selected={(this.videoTracks[0].label === device.label) ? true : false}>{device.label}</option>\r\n            })\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {this.state.errorMsg ? (<p> {this.state.errorMsg} </p>) :\r\n                    (\r\n                        <div>\r\n                            <video controls={true} className=\"webcam\" ref={this.camVideo} autoPlay playsInline hidden={false}></video>\r\n                            <br />\r\n                            <button onClick={this.startStream} hidden={this.state.streamState}>create stream</button>\r\n                            <button onClick={this.endStream} hidden={!this.state.streamState}>release stream</button>\r\n                            <select ref={this.cameraSelect} onChange={this.cameraSwitch} >\r\n                                {options}\r\n                            </select>\r\n                            <br />\r\n\r\n                            {/* TODO:seperate below to another component */}\r\n                            {(this.state.streamState) ?\r\n                                (<div>\r\n                                    <canvas className=\"c1\" ref={this.c1} width={this.width} height={this.height}></canvas>\r\n                                    <br />\r\n                                    <select onChange={this.videoEffect} defaultValue=\"original\">\r\n                                        <option value=\"original\">Original</option>\r\n                                        <option value=\"grayscale\">Grayscale</option>\r\n                                        <option value=\"blur\">Blur</option>\r\n                                        <option value=\"mosaic\">Mosaic</option>\r\n                                    </select>\r\n                                    <button onClick={this.saveFrame}> Save </button>\r\n                                    <a ref={this.download} download=\"download.png\"></a>\r\n                                    \r\n                                </div>) :\r\n                                <p> Create stream first </p>\r\n                            }\r\n\r\n                        </div>\r\n\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Webcam; ","import React from 'react';\r\nimport './App.css';\r\nimport Webcam from './components/webcam';\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Webcam />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}