{"version":3,"sources":["components/canvas.js","components/webcam.js","App.js","serviceWorker.js","index.js"],"names":["Canvas","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initCanvas","context","c1","current","getContext","effectType","height","setting","window","videoTracks","getSettings","width","aspectRatio","parseInt","original","videoEffect","e","console","log","target","value","grayScale","blur","mosaic","camVideo","srcObject","streamState","drawImage","setTimeout","readyState","imageData","getImageData","data","dimension","i","y","putImageData","w","h","r","g","b","j","k","count","Math","abs","saveFrame","url","toDataURL","a","document","createElement","href","download","dispatchEvent","MouseEvent","React","createRef","react_default","className","ref","onChange","defaultValue","onClick","Component","Webcam","endStream","stop","stream","removeTrack","setState","startStream","getUserMedia","getVideoDevices","navigator","mediaDevices","enumerateDevices","then","devices","camera","videoDevices","filter","device","kind","options","map","label","deviceId","key","catch","err","errorMsg","message","name","constraints","getVideoTracks","cameraSwitch","video","exact","state","audio","min","ideal","max","controls","autoPlay","playsInline","hidden","canvas","App","webcam","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bae1b785.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../App.css';\r\n\r\nclass Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.c1 = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.streamState) {\r\n            this.initCanvas();\r\n        }\r\n    }\r\n\r\n    // saving canvas data to component member and set the size\r\n    initCanvas = () => {\r\n        this.context = this.c1.current.getContext('2d');\r\n        this.effectType = \"original\";\r\n        this.height = 400;\r\n        let setting = window.videoTracks[0].getSettings();\r\n        this.width = (setting.aspectRatio) ? parseInt(this.height * setting.aspectRatio) : parseInt(setting.width / setting.height * this.height);\r\n        this.c1.current.width = this.width;\r\n        this.c1.current.height = this.height;\r\n        this.original();\r\n    }\r\n\r\n    // handling selection of videoEffects\r\n    videoEffect = (e) => {\r\n        console.log(e.target.value);\r\n        this.effectType = e.target.value;\r\n        (e.target.value === \"grayscale\") ? this.grayScale() : (e.target.value === \"blur\") ? this.blur() : (e.target.value === \"mosaic\") ? this.mosaic() : this.original();\r\n    }\r\n\r\n    // original effect- call self and redo every 30 milliseconds\r\n    original = () => {\r\n        if (window.camVideo.srcObject === null || this.props.streamState === false || this.effectType !== \"original\") {\r\n            return;\r\n        }\r\n        this.context.drawImage(window.camVideo, 0, 0, this.width, this.height);\r\n        setTimeout(() => {\r\n            this.original();\r\n        }, 30);\r\n    }\r\n\r\n    // grayscale\r\n    grayScale = () => {\r\n        if (window.videoTracks[0].readyState === \"ended\" || this.props.streamState === false || this.effectType !== \"grayscale\") {\r\n            return;\r\n        }\r\n\r\n        this.context.drawImage(window.camVideo, 0, 0, this.width, this.height);\r\n        let imageData = this.context.getImageData(0, 0, this.width, this.height);\r\n        let data = imageData.data;\r\n        let dimension = this.height * this.width * 4; //mulitple by 4 because one pixel contains r,g,b,a\r\n\r\n        for (let i = 0; i < dimension; i += 4) {\r\n            let y = data[i] * 0.30 + data[i + 1] * 0.59 + data[i + 2] * 0.11; //according to the grayscale formula\r\n            data[i] = y; //r\r\n            data[i + 1] = y; //g\r\n            data[i + 2] = y; //b\r\n        }\r\n\r\n        this.context.putImageData(imageData, 0, 0);\r\n        setTimeout(() => {\r\n            this.grayScale();\r\n        }, 30);\r\n    }\r\n\r\n    //mosaic \r\n    mosaic = () => {\r\n        if (window.videoTracks[0].readyState === \"ended\" || this.props.streamState === false || this.effectType !== \"mosaic\") {\r\n            return;\r\n        }\r\n        this.context.drawImage(window.camVideo, 0, 0, this.width, this.height);\r\n        let imageData = this.context.getImageData(0, 0, this.width, this.height);\r\n        let data = imageData.data;\r\n        let w = this.width * 4;\r\n        let h = this.height;\r\n\r\n        for (let i = 0; i < h; i += 24) {\r\n            let r, g, b;\r\n            for (let j = 0; j < w; j += 4) {\r\n                if (j % 96 === 0 && i % 24 === 0) {\r\n                    data[i * w + j + 3] = 240;\r\n                    r = data[i * w + j];\r\n                    g = data[i * w + j + 1];\r\n                    b = data[i * w + j + 2];\r\n                }\r\n                for (let k = 0; k < 24; k++) {\r\n                    data[(i + k) * w + j] = r;\r\n                    data[(i + k) * w + j + 1] = g;\r\n                    data[(i + k) * w + j + 2] = b;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        this.context.putImageData(imageData, 0, 0);\r\n        setTimeout(() => {\r\n            this.mosaic();\r\n        }, 30);\r\n    }\r\n\r\n    //blur, need to be more efficient, easily lag\r\n    blur = () => {\r\n        if (window.videoTracks[0].readyState === \"ended\" || this.props.streamState === false || this.effectType !== \"blur\") {\r\n            return;\r\n        }\r\n\r\n        this.context.drawImage(window.camVideo, 0, 0, this.width, this.height);\r\n        let imageData = this.context.getImageData(0, 0, this.width, this.height);\r\n        let data = imageData.data;\r\n        let dimension = this.width * this.height * 4;\r\n        let step = 3*3 * 4;\r\n        let r, g, b, count;\r\n\r\n\r\n        //iterate all pixels and mix its 6*6 pixels surrounded \r\n        for (let i = 0; i < dimension; i += 4) { //i represent the central pixel\r\n            for (let k = i - step; k < i + step; k += 4) { //k represent surrounded pixels\r\n                if (data[k] >= 0 && Math.abs(k % (4 * this.width) - i % (4 * this.width)) <= this.width) { //to avoid border pixels mix \r\n                    r += data[k];\r\n                    g += data[k + 1];\r\n                    b += data[k + 2];\r\n                    count += 1;\r\n                }\r\n            }\r\n            data[i] = parseInt(r / count);\r\n            data[i + 1] = parseInt(g / count);\r\n            data[i + 2] = parseInt(b / count);\r\n            r = g = b = count = 0;\r\n        }\r\n\r\n        this.context.putImageData(imageData, 0, 0);\r\n        setTimeout(() => {\r\n            this.blur();\r\n        }, 30);\r\n    }\r\n\r\n    saveFrame = () => {\r\n        let url = this.c1.current.toDataURL(\"image/png\");\r\n        let a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = this.effectType + \".png\";\r\n        a.dispatchEvent(new MouseEvent('click')); //fire a.click event\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                {(this.props.streamState) ?\r\n                    <div>\r\n                        <canvas className=\"c1\" ref={this.c1}></canvas>\r\n                        <br />\r\n                        <select onChange={this.videoEffect} defaultValue=\"original\">\r\n                            <option value=\"original\">Original</option>\r\n                            <option value=\"grayscale\">Grayscale</option>\r\n                            <option value=\"blur\">Blur</option>\r\n                            <option value=\"mosaic\">Mosaic</option>\r\n                        </select>\r\n                        <button onClick={this.saveFrame}> Save </button>\r\n\r\n                    </div>\r\n                    : (<p> Create stream first </p>)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Canvas; ","import React from 'react';\r\nimport './../App.css';\r\nimport Canvas from './canvas';\r\n\r\nclass Webcam extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            errorMsg: \"\", //show messages and indicate the errors -string message\r\n            streamState: \"\", //indicate current stream is active or not -boolean\r\n            camera: \"\" //indicate which camera is currently in use -string device's id\r\n        }\r\n\r\n        this.camVideo = React.createRef(); //video DOM element\r\n    }\r\n\r\n    // after component mounted, set up contraints and start the stream.\r\n    componentDidMount() {\r\n\r\n        //reason that make it to member is we'll set device constraint while selecting devices\r\n        this.constraints = {\r\n            audio: false,\r\n            video: {\r\n                width: { min: 640, ideal: 1920, max: 1920 },\r\n                height: { min: 400, ideal: 1080, max: 1080 },\r\n            }\r\n        }\r\n        this.startStream();\r\n    }\r\n\r\n    // to end video stream\r\n    endStream = () => {\r\n        this.videoTracks[0].stop();\r\n        this.stream.removeTrack(this.videoTracks[0]);\r\n        this.camVideo.current.srcObject = null;\r\n        this.setState({\r\n            streamState: false,\r\n        });\r\n    }\r\n\r\n    // to start a new video stream\r\n    startStream = () => {\r\n        this.getUserMedia();\r\n    }\r\n\r\n    // to get videoDevices\r\n    getVideoDevices = () => {\r\n        navigator.mediaDevices.enumerateDevices()\r\n            .then((devices) => {\r\n                this.videoDevices = devices.filter((device) => {\r\n                    return (device.kind === \"videoinput\");\r\n                });\r\n\r\n                if (this.videoDevices) {\r\n                    let camera;\r\n                    this.options = this.videoDevices.map((device) => {\r\n                        if (device.label === this.videoTracks[0].label) { //if the deivce is currently in use, save its id to state\r\n                            camera = device.deviceId;\r\n                        }\r\n                        return <option key={device.deviceId} value={device.deviceId} >{device.label}</option> //save devices info, and render them in options \r\n                    })\r\n                    this.setState({ camera, streamState: true });\r\n                }\r\n\r\n            })\r\n\r\n            .catch((err) => {\r\n                this.setState({\r\n                    errorMsg: \"Error message: \" + (err.message ? err.message : err.name)\r\n                });\r\n            })\r\n    }\r\n\r\n    // to get media stream\r\n    getUserMedia = () => {\r\n        navigator.mediaDevices.getUserMedia(this.constraints)\r\n            .then((stream) => {\r\n                this.stream = stream;\r\n                this.videoTracks = stream.getVideoTracks();\r\n                this.camVideo.current.srcObject = stream;\r\n                window.camVideo = this.camVideo.current;\r\n                window.videoTracks = this.videoTracks;\r\n                this.getVideoDevices();\r\n\r\n            })\r\n            .catch((err) => {\r\n                this.setState({\r\n                    errorMsg: \"Error message: \" + (err.message ? err.message : err.name)\r\n                });\r\n            })\r\n    }\r\n\r\n    // handling changes of camera\r\n    cameraSwitch = (e) => {\r\n        this.constraints.video.deviceId = { exact: e.target.value };\r\n        this.setState({ camera: e.target.value });\r\n        this.endStream();\r\n        this.startStream();\r\n    }\r\n\r\n    render() {\r\n        console.log(\"render\");\r\n        let options = this.options;\r\n   \r\n        return (\r\n            <div>\r\n                {this.state.errorMsg ? (<p> {this.state.errorMsg} </p>) :\r\n                    (\r\n                        <div>\r\n                            <video controls={true} className=\"webcam\" ref={this.camVideo} autoPlay playsInline hidden={false}></video>\r\n                            <br />\r\n                            <button onClick={this.startStream} hidden={this.state.streamState}>create stream</button>\r\n                            <button onClick={this.endStream} hidden={!this.state.streamState}>release stream</button>\r\n                            <select onChange={this.cameraSwitch} value={this.state.camera}>\r\n                                {options}\r\n                            </select>\r\n                            <br />\r\n                            <Canvas streamState={this.state.streamState} />\r\n                        </div>\r\n\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Webcam; ","import React from 'react';\r\nimport './App.css';\r\nimport Webcam from './components/webcam';\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Webcam />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}