{"version":3,"sources":["components/webcam.js","App.js","serviceWorker.js","index.js"],"names":["Webcam","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","videoSwitch","stream","active","endStream","startStream","videoTracks","stop","removeTrack","camVideo","current","srcObject","setState","streamState","getVideoDevices","navigator","mediaDevices","enumerateDevices","then","devices","videoDevices","filter","device","kind","getUserMedia","catch","err","errorMsg","message","name","constraints","getVideoTracks","processor","cameraSwitch","video","deviceId","exact","cameraSelect","value","videoEffect","e","effectType","target","grayScale","blur","original","console","log","c1","getContext","context","addEventListener","height","videoHeight","width","videoWidth","ended","state","drawImage","setTimeout","imageData","getImageData","data","w","h","i","j","y","putImageData","r","g","b","saveFrame","React","createRef","c2","audio","min","ideal","max","aspectRatio","options","_this2","map","react_default","a","createElement","key","selected","label","controls","className","ref","autoPlay","playsInline","hidden","onClick","onChange","defaultValue","Component","App","webcam","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb0252e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../App.css';\r\n\r\nclass Webcam extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            errorMsg: \"\",\r\n            streamState: true, //\r\n\r\n        }\r\n\r\n        this.camVideo = React.createRef();\r\n        this.cameraSelect = React.createRef();\r\n        this.c1 = React.createRef();\r\n        this.c2 = React.createRef();\r\n    }\r\n\r\n    // to switch on/off video stream\r\n    videoSwitch = () => {\r\n        if (this.stream.active === true) {\r\n            this.endStream();\r\n        } else {\r\n            this.startStream();\r\n        }\r\n    }\r\n\r\n    // to end video stream\r\n    endStream = () => {\r\n        this.videoTracks[0].stop();\r\n        this.stream.removeTrack(this.videoTracks[0]);\r\n        this.camVideo.current.srcObject = null;\r\n        this.setState({\r\n            streamState: false,\r\n        });\r\n    }\r\n\r\n    // to start a new video stream\r\n    startStream = () => {\r\n        this.getVideoDevices();\r\n    }\r\n\r\n    // to get videoDevices\r\n    getVideoDevices = () => {\r\n        navigator.mediaDevices.enumerateDevices()\r\n            .then((devices) => {\r\n                this.videoDevices = devices.filter((device) => {\r\n                    return (device.kind === \"videoinput\");\r\n                });\r\n                this.getUserMedia();\r\n            })\r\n\r\n            .catch((err) => {\r\n                this.setState({\r\n                    errorMsg: \"Error message: \" + (err.message ? err.message : err.name)\r\n                });\r\n            })\r\n\r\n    }\r\n\r\n    // to get media stream\r\n    getUserMedia = () => {\r\n        navigator.mediaDevices.getUserMedia(this.constraints)\r\n            .then((stream) => {\r\n                this.stream = stream;\r\n                this.videoTracks = stream.getVideoTracks();\r\n                this.camVideo.current.srcObject = stream;\r\n                this.setState({\r\n                    streamState: true,\r\n                });\r\n\r\n\r\n                this.processor();\r\n            })\r\n            .catch((err) => {\r\n                this.setState({\r\n                    errorMsg: \"Error message: \" + (err.message ? err.message : err.name)\r\n                });\r\n            })\r\n    }\r\n\r\n    // handling changes of camera\r\n    cameraSwitch = () => {\r\n        this.constraints.video.deviceId = { exact: this.cameraSelect.current.value };\r\n        this.endStream();\r\n        this.startStream();\r\n    }\r\n\r\n    // after component mounted, set up contraints and start the stream.\r\n    componentDidMount() {\r\n        this.constraints = {\r\n            audio: false,\r\n            video: {\r\n                width: { min: 640, ideal: 1920, max: 1920 },\r\n                height: { min: 400, ideal: 1080, max: 1080 },\r\n                aspectRatio: 1.777777778,\r\n            }\r\n        }\r\n        this.startStream();\r\n    }\r\n\r\n\r\n    videoEffect = (e) => {\r\n\r\n        this.effectType = e.target.value;\r\n        (e.target.value === \"grayscale\") ? this.grayScale() : (e.target.value === \"blur\") ? (this.blur()) : this.original();\r\n\r\n    }\r\n\r\n    // whenever the video play, call original\r\n    processor = () => {\r\n\r\n        console.log(this.c1.current.getContext('2d'));\r\n        this.context = this.c1.current.getContext('2d');\r\n        this.effectType = \"original\";\r\n        this.camVideo.current.addEventListener('play', () => {\r\n            this.original();\r\n            this.height = this.camVideo.current.videoHeight;\r\n            this.width = this.camVideo.current.videoWidth;\r\n            this.c1.current.width =this.width;\r\n            this.c1.current.height = this.height;\r\n\r\n        }, false);\r\n\r\n    }\r\n\r\n    // call self and redo computeFrame every 30 milliseconds\r\n    original = () => {\r\n        console.log(this.effectType);\r\n        if (this.camVideo.current.ended || this.state.streamState === false || this.effectType !== \"original\") {\r\n            return;\r\n        }\r\n\r\n        this.context.drawImage(this.camVideo.current, 0, 0, this.width, this.height);\r\n        setTimeout(() => {\r\n            this.original();\r\n        }, 30);\r\n    }\r\n\r\n    // grayscale\r\n    grayScale = () => {\r\n        console.log(this.effectType);\r\n        if (this.camVideo.current.ended || this.state.streamState === false || this.effectType !== \"grayscale\") {\r\n            return;\r\n        }\r\n        this.context.drawImage(this.camVideo.current, 0, 0, this.width, this.height);\r\n        let imageData = this.context.getImageData(0, 0, this.width, this.height);\r\n        let data = imageData.data;\r\n        let w = this.width * 4;\r\n        let h = this.height;\r\n\r\n        for (let i = 0; i < h; i++) {\r\n            for (let j = 0; j < w; j += 4) {  //mulitple by 4 because one pixel contains r,g,b,a\r\n                let y = data[i * w + j] * 0.30 + data[i * w + j + 1] * 0.59 + data[i * w + j + 2] * 0.11;\r\n                data[i * w + j] = y; //r\r\n                data[i * w + j + 1] = y; //g\r\n                data[i * w + j + 2] = y; //b\r\n            }\r\n        }\r\n        this.context.putImageData(imageData, 0, 0);\r\n\r\n        setTimeout(() => {\r\n            this.grayScale();\r\n        }, 0);\r\n    }\r\n\r\n    //blur\r\n    blur = () => {\r\n        if (this.camVideo.current.ended || this.state.streamState === false || this.effectType !== \"blur\") {\r\n            return;\r\n        }\r\n        this.context.drawImage(this.camVideo.current, 0, 0, this.width, this.height);\r\n        let imageData = this.context.getImageData(0, 0, this.width, this.height);\r\n        let data = imageData.data;\r\n        let w = this.width * 4;\r\n        let h = this.height;\r\n\r\n        for (let i = 0; i < h; i++) {\r\n            var r, g, b;\r\n            for (let j = 0; j <= w; j += 4) {\r\n                if (i % 12 === 0 || j % 48 === 0) {\r\n                    data[i * w + j + 3] = 128;\r\n                    if (j % 48 === 0) {\r\n                        r = data[i * w + j];\r\n                        g = data[i * w + j + 1];\r\n                        b = data[i * w + j + 2];\r\n                    }\r\n                }\r\n                data[i * w + j] = r;\r\n                data[i * w + j + 1] = g;\r\n                data[i * w + j + 2] = b;\r\n                data[i * w + j + 3] = 250;\r\n            }\r\n        }\r\n\r\n        this.context.putImageData(imageData, 0, 0);\r\n\r\n        setTimeout(() => {\r\n            this.blur();\r\n        }, 0);\r\n    }\r\n\r\n    saveFrame = () => {\r\n        console.log(\"save\");\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        console.log(\"render\");\r\n        let options;\r\n        if (this.videoTracks) {\r\n            options = this.videoDevices.map((device) => {\r\n                return <option key={device.deviceId} value={device.deviceId} selected={(this.videoTracks[0].label === device.label) ? true : false}>{device.label}</option>\r\n            })\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {this.state.errorMsg ? (<p> {this.state.errorMsg} </p>) :\r\n                    (\r\n                        <div>\r\n                            <video controls={true} className=\"webcam\" ref={this.camVideo} autoPlay playsInline hidden={true}></video>\r\n                            <br />\r\n                            <button onClick={this.startStream} hidden={this.state.streamState}>create stream</button>\r\n                            <button onClick={this.endStream} hidden={!this.state.streamState}>release stream</button>\r\n                            <select ref={this.cameraSelect} onChange={this.cameraSwitch} >\r\n                                {options}\r\n                            </select>\r\n                            <br />\r\n\r\n                            {(this.state.streamState) ?\r\n                                (<div>\r\n                                    <canvas className=\"c1\" ref={this.c1} width={this.width} height={this.height}></canvas>\r\n                                    <br />\r\n                                    <select onChange={this.videoEffect} defaultValue=\"original\">\r\n                                        <option value=\"original\">Original</option>\r\n                                        <option value=\"grayscale\">Grayscale</option>\r\n                                        <option value=\"blur\">Blur</option>\r\n                                    </select>\r\n                                    <button onClick={this.saveFrame}> Save </button>\r\n                                </div>) :\r\n                                <p> Create stream first </p>\r\n                            }\r\n\r\n                        </div>\r\n\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Webcam; ","import React from 'react';\r\nimport './App.css';\r\nimport Webcam from './components/webcam';\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Webcam />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}